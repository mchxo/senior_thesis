knitr::opts_knit$set(root.dir="/Users/mike/Desktop/senior_thesis")
require("sf")
require(tidyverse)
require(ggbiplot)
require(plotly)
require(mgcv)
require(GGally)
require(car)
require(gstat)
require(iml)
data = read_sf("Final_Data/cleaned_within.shp")
data$index = 1:nrow(data)
data
# rename columns (this is faster to do here than in ArcGIS)
data = data %>% rename(wf2010=Sum_in2010,
wf2011=Sum_in2011,
wf2012=Sum_in2012,
wf2013=Sum_in2013,
wf2014=Sum_in2014,
wf2015=Sum_in2015,
wf2016=Sum_in2016,
wf2017=Sum_in2017,
wf2018=Sum_in2018,
wf2019=Sum_in2019,
wf1 = Sum_inJan,
wf2 = Sum_inFeb,
wf3 = Sum_inMar,
wf4 = Sum_inApr,
wf5 = Sum_inMay,
wf6 = Sum_inJun,
wf7 = Sum_inJul,
wf8 = Sum_inAug,
wf9 = Sum_inSep,
wf10 = Sum_inOct,
wf11 = Sum_inNov,
wf12 = Sum_inDec,
pb2010 = Sum_pb2010,
pb2011 = Sum_pb2011,
pb2012 = Sum_pb2012,
pb2013 = Sum_pb2013,
pb2014 = Sum_pb2014,
pb2015 = Sum_pb2015,
pb2016 = Sum_pb2016,
pb2017 = Sum_pb2017,
pb2018 = Sum_pb2018,
pb2019 = Sum_pb2019,
pb1 = Sum_pbJan,
pb2 = Sum_pbFeb,
pb3 = Sum_pbMar,
pb4 = Sum_pbApr,
pb5 = Sum_pbMay,
pb6 = Sum_pbJun,
pb7 = Sum_pbJul,
pb8 = Sum_pbAug,
pb9 = Sum_pbSep,
pb10 = Sum_pbOct,
pb11 = Sum_pbNov,
pb12 = Sum_pbDec,
wf_count = Sum_count,
pb_count = Sum_pbCoun,
shrub = Max_shrub_,
tree = Max_tree_a,
herb = Max_herb_a,
pWFA2010 = Sum_pWFA20,
pWFA2011 = Sum_pWFA_1,
pWFA2012 = Sum_pWFA_2,
pWFA2013 = Sum_pWFA_3,
pWFA2014 = Sum_pWFA_4,
pWFA2015 = Sum_pWFA_5,
pWFA2016 = Sum_pWFA_6,
pWFA2017 = Sum_pWFA_7,
pWFA2018 = Sum_pWFA_8,
pWFA2019 = Sum_pWFA_9,
slope = Max_slope,
aspect = Max_aspect) %>%
select(-Count_1)
data
# compute fire metrics
df = st_drop_geometry(data)
# mean annual proportion of gridcell burned
annual_pwf = apply(df %>% select(pWFA2010, pWFA2011, pWFA2012, pWFA2013, pWFA2014,
pWFA2015, pWFA2016, pWFA2017, pWFA2018, pWFA2019),
MARGIN=1, FUN=mean)
annual_ppb = apply(df %>% select(pPBA10, pPBA11, pPBA12, pPBA13, pPBA14, pPBA15,
pPBA16, pPBA17, pPBA18, pPBA19),
MARGIN=1, FUN=mean)
# sd of annual proportion of gridcell burned
sd_pwf = apply(df %>% select(pWFA2010, pWFA2011, pWFA2012, pWFA2013, pWFA2014,
pWFA2015, pWFA2016, pWFA2017, pWFA2018, pWFA2019),
MARGIN=1, FUN=sd)
sd_ppb = apply(df %>% select(pPBA10, pPBA11, pPBA12, pPBA13, pPBA14, pPBA15,
pPBA16, pPBA17, pPBA18, pPBA19),
MARGIN=1, FUN=sd)
# number of distinct months burned
nMon_wf = apply((df %>% select(wf1, wf2, wf3, wf4, wf5, wf6, wf7, wf8, wf9,
wf10, wf11, wf12)) > 0, MARGIN=1, FUN=sum)
nMon_pb = apply((df %>% select(pb1, pb2, pb3, pb4, pb5, pb6, pb7, pb8, pb9,
pb10, pb11, pb12)) > 0, MARGIN=1, FUN=sum)
table(nMon_pb)
fire_metric = cbind(annual_pwf, sd_pwf, nMon_wf)
pb_metric = cbind(annual_ppb, sd_ppb, nMon_pb)
table(fire_metric[,3])
data$annual_wf = annual_pwf
data$sd_wf = sd_pwf
data$nMonth_wf = nMon_wf
data$annual_pb = annual_ppb
data$sd_pb = sd_ppb
data$nMonth_pb = nMon_pb
# pca analysis
# wildfire score
wf_pca = prcomp(fire_metric, center=T, scale=T)
summary(wf_pca)
wf_pc1 = wf_pca$x[,1]
plot(fire_metric[,3], wf_pc1)
plot_ly(x=fire_metric[,1], y=fire_metric[,2], z=fire_metric[,3], type="scatter3d", mode="markers", color=wf_pc1)
# pb score
pb_pca = prcomp(pb_metric, center=T, scale=T)
summary(pb_pca)
pb_pc1 = pb_pca$x[,1]
plot(pb_metric[,3], pb_pc1)
plot_ly(x=pb_metric[,1], y=pb_metric[,2], z=pb_metric[,3], type="scatter3d", mode="markers", color=pb_pc1)
data$fire_score = wf_pc1
data$pb_score = pb_pc1
ggplot(data=data) +
geom_sf(aes(fill=tree, color=tree)) +
scale_fill_viridis_c() +
scale_color_viridis_c()
plot(fire_metric[,3], wf_pc1)
plot(fire_metric[,1], wf_pc1)
plot(pb_metric[,3], pb_pc1)
plot(fire_metric[,1], wf_pc1)
plot(fire_metric[,2], wf_pc1)
plot(fire_metric[,3], wf_pc1)
plot_ly(x=fire_metric[,1], y=fire_metric[,2], z=fire_metric[,3], type="scatter3d", mode="markers", color=wf_pc1)
plot(pb_metric[,1], pb_pc1)
plot_ly(x=pb_metric[,2], y=pb_metric[,2], z=pb_metric[,3], type="scatter3d", mode="markers", color=pb_pc1)
plot(pb_metric[,2], pb_pc1)
plot(pb_metric[,3], pb_pc1)
plot_ly(x=pb_metric[,1], y=pb_metric[,2], z=pb_metric[,3], type="scatter3d", mode="markers", color=pb_pc1)
summary(wf_pca)
summary(pb_pca)
# initial GAM fitting
covariates = colnames(data)[c(24:36, 38:41, 88:91)]
form1 = formula(paste("fire_score ~ pb_score +", paste(covariates, collapse = " + "), sep=""))
form2 = formula(paste("fire_score ~ s(pb_score) +", paste("s(", covariates,")", collapse = " + ", sep=""), sep=""))
for_gam = st_drop_geometry(data)
gam_naive = gam(form1, data=for_gam)
summary(gam_naive)
gam_allS = gam(form2, data=for_gam)
summary(gam_allS)
# heteroskasticity analysis
res = gam_allS$residuals
fitV = gam_allS$fitted.values
plot(fitV, res)
res_plot = data[,c("index", "geometry")]
res_plot$residual = res
res_plot$fitted_value = fitV
ggplot(data=data) +
geom_sf(aes(fill=res, color=res)) +
scale_fill_viridis_c() +
scale_color_viridis_c()
x = data$CENTROID_X
y = data$CENTROID_Y
vario = as.data.frame(cbind(res=res, x=x, y=y))
v = variogram(res~1, loc= ~x+y, data=vario, alpha = c(0, 45, 90, 135))
sum(is.na(res))
vario
plot(v)
v = variogram(res~1, loc= ~x+y, data=vario)
plot(v)
# use moment estimators to estimated identified values
piN = 35 / (35+42+70)
piP = 42 / (35+42+70)
piC = 70 / (35+42+70)
e1 = 40/70
e05 = 17/42
e0 = 7/35
# bound the ace for compliers
tauCLow = e1 - e0/piC
tauCHigh = e1 - (e0-piP-piN)/piC
c(tauCLow, tauCHigh)
# bound the ace for partial compliers
tauPLow = e05 - e0/piP
tauPHigh = e05 - (e0-piC-piN)/piP
c(tauPLow, tauPHigh)
